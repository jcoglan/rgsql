grammar SQL

message             <- _* query _* ';' _* %mk_message
_                   <- [ \t\n\r]

keyword             <- (`CREATE` / `DROP` / `TABLE` / `IF` / `EXISTS` /
                        `INSERT` / `INTO` / `VALUES` /
                        `SELECT` / `AS` / `FROM` /
                        `TRUE` / `FALSE` / `NULL` /
                        `AND` / `OR` / `NOT`)
                       ![A-Za-z0-9_]

query               <- create_table_query
                     / drop_table_query
                     / insert_query
                     / select_query

create_table_query  <- `CREATE` _+ `TABLE` _+ field_id
                       _* '(' _* field_def_list _* ')'
                       %mk_create_table_query

field_def_list      <- field_def (_* ',' _* field_def)* %mk_field_def_list
field_def           <- field_id _+ field_type %mk_field_def
field_id            <- !keyword [A-Za-z] [A-Za-z0-9_]* %mk_field_id
field_type          <- `BOOLEAN` / `INTEGER`

drop_table_query    <- `DROP` _+ `TABLE` _+
                       (`IF` _+ `EXISTS` _+)?
                       field_id %mk_drop_table

insert_query        <- `INSERT` _+ `INTO` _+ field_id _+
                       `VALUES` _*
                       insert_tuples
                       %mk_insert

insert_tuples       <- insert_values (_* ',' _* insert_values)* %mk_insert_tuples
insert_values       <- '(' _* term (_* ',' _* term)* _* ')' %mk_insert_values

select_query        <- `SELECT` select_list
                       (_+ `FROM` _+ field_id)?
                       %mk_select

select_list         <- _+ select_expr (_* ',' _* select_expr)* %mk_select_list
                     / _* %mk_empty_list

select_expr         <- term (_+ `AS` _+ field_id)? %mk_select_expr

term                <- ('-' / `NOT`) _* term %mk_unary_term
                     / term_lhs _* bin_op _* term %mk_bin_op_term
                     / term_lhs

term_lhs            <- '(' _* term _* ')' %mk_paren_term
                     / function_term
                     / field_id
                     / literal

function_term       <- function_name '(' _* function_args _* ')' %mk_fn_term
function_name       <- `ABS` / `MOD`
function_args       <- term (_* ',' _* term)* %mk_fn_args

bin_op              <- '+' / '-' / '*' / '/'
                     / '<>' / '<=' / '>=' / '<' / '>' / '='
                     / `AND` / `OR`

literal             <- boolean / integer
boolean             <- `TRUE` %mk_bool / `FALSE` %mk_bool
integer             <- '-'? ('0' / [1-9] [0-9]*) %mk_int
